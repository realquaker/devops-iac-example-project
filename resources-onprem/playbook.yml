---
- name: Install Jenkins and Docker
  hosts: jenkins
  gather_facts: no
  become: true
  vars:
    jenkins_admin_name: "butler"
    jenkins_admin_pass: "um9beed0vua7aeZi"
    jenkins_plugins:    ['app_server', 'other_app_server']
    pip_required_roles: ['some_server', 'other_server']
  tasks:

    - name: Wait 300 seconds, but only start checking after 30 seconds
      ansible.builtin.wait_for_connection:
        connect_timeout: 5
        delay: 30
        sleep: 10
        timeout: 300

    - name: Install dependencies and some optional apps
      apt:
        name:
          - git
          - curl
          - unzip
          - gnupg
          - lsb-release
          - fontconfig
          - openjdk-21-jdk
          - apt-transport-https
          - ca-certificates
        state: present
        update_cache: true

    - name: Add Jenkins Repo GPG key
      apt_key:
        url: https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
        state: present

    - name: Add Jenkins repository
      apt_repository:
        repo: "deb http://pkg.jenkins.io/debian-stable binary/"
        state: present

    - name: Install Jenkins
      apt:
        name: jenkins
        state: present

    - name: Ensure Jenkins is started and enabled
      systemd:
        name: jenkins
        state: started
        enabled: true

    - name: Add Docker Repo GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu noble stable"
        state: present

    - name: Install Docker
      apt:
        name: docker-ce
        state: present

    - name: Ensure Docker is started and enabled
      systemd:
        name: docker
        state: started
        enabled: true
    
    - name: Retrieve Jenkins unlock code
      shell: "cat /var/lib/jenkins/secrets/initialAdminPassword"
      register: jenkins_unlock_code
    
    - debug: msg="Jenkins unlock code (install admin password) is {{ jenkins_unlock_code.stdout }}"

    - name: Unlock Jenkins and add main admin user
      jenkins_script:
        script: |
          import hudson.security.*
          import jenkins.model.*
          def instance = Jenkins.getInstance()
          def hudsonRealm = new HudsonPrivateSecurityRealm(false)
          def users = hudsonRealm.getAllUsers()
          users_s = users.collect { it.toString() }
          if ("{{ jenkins_admin_name }}" in users_s) {
          println "Admin user already exists - updating password"
          def user = hudson.model.User.get('{{ jenkins_admin_name }}');
          def password = hudson.security.HudsonPrivateSecurityRealm.Details.fromPlainPassword('{{ jenkins_admin_pass }}')
          user.addProperty(password)
          user.save()
          }
          else {
          println "Creating local admin user"
          hudsonRealm.createAccount('{{ jenkins_admin_name }}', '{{ jenkins_admin_pass }}')
          instance.setSecurityRealm(hudsonRealm)
          def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
          instance.setAuthorizationStrategy(strategy)
          instance.save()
          }
#        args:
#          user_name: "{{ jenkins_admin_name }}"
#          user_pwd: "{{ jenkins_admin_pass }}"
        user: admin
        password: "{{ jenkins_unlock_code.stdout }}"

    - name: complete setup wizard
      jenkins_script:
        script: |
          import static jenkins.model.Jenkins.instance as jenkins
          import jenkins.install.InstallState
          if (!jenkins.installState.isSetupComplete()) {
            InstallState.INITIAL_SETUP_COMPLETED.initializeState()
          }
        user: admin
        password: "{{ jenkins_unlock_code.stdout }}"

#    - name: install plugin
#      jenkins_plugin:
#        name: "{{ item }}"
#        state: latest
#        url_username: admin
#        url_password: "{{ jenkins_unlock_code.stdout }}"
#        with_items: "{{ jenkins_plugins }}"

